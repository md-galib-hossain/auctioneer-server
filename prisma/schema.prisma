// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  name          String
  emailVerified Boolean?      @default(false)
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  role          String?       @default("user") // Options: user, admin, superadmin
  banned        Boolean?      @default(false)
  banReason     String?
  banExpires    Int?
  sessions      Session[]
  accounts      Account[]
  bids          Bid[]
  cartItems     CartItem[]
  auctionRooms  AuctionRoom[] @relation("AuctionRoomParticipants")
  messages      ChatMessage[]
  auctionRoom   AuctionRoom[]
  auctionItem   AuctionItem[]
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id @default(uuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

enum AuctionRoomStatus {
  pending
  active
  closed
}

model AuctionRoom {
  id           String            @id @default(uuid())
  title        String
  roomCode     String            @unique
  description  String? // Optional hints about item types
  isPrivate    Boolean           @default(false)
  password     String? // Required for private rooms
  status       AuctionRoomStatus @default(pending)
  isActive     Boolean           @default(true)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  startTime    DateTime?
  endTime      DateTime?
  createdBy    String // Admin or superadmin who created the room
  creator      User              @relation(fields: [createdBy], references: [id], onDelete: Restrict)
  participants User[]            @relation("AuctionRoomParticipants")
  items        AuctionItem[]
  rules        AuctionRule[]
  bids         Bid[]
  messages     ChatMessage[]
}

enum AuctionItemStatus {
  pending
  active
  sold
}

model AuctionItem {
  id            String            @id @default(uuid())
  auctionRoomId String
  name          String // Revealed after entering room
  description   String?
  startingPrice Float
  currentPrice  Float? // Updated with highest bid
  status        AuctionItemStatus @default(pending) // Options: pending, active, sold
  isActive      Boolean           @default(true)
  winnerId      String? // User who won the item
  winner        User?             @relation(fields: [winnerId], references: [id], onDelete: SetNull)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  auctionRoom   AuctionRoom       @relation(fields: [auctionRoomId], references: [id], onDelete: Cascade)

  bids      Bid[]
  cartItems CartItem[]
}

model AuctionRule {
  id            String      @id @default(uuid())
  auctionRoomId String
  description   String // e.g., "Next bid must be within 15 seconds"
  key           String // e.g., "bid_time_limit"
  value         String // e.g., "15"
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  auctionRoom   AuctionRoom @relation(fields: [auctionRoomId], references: [id], onDelete: Cascade)
}

model Bid {
  id            String      @id @default(uuid())
  auctionRoomId String
  auctionItemId String
  userId        String
  amount        Float
  createdAt     DateTime    @default(now())
  auctionRoom   AuctionRoom @relation(fields: [auctionRoomId], references: [id], onDelete: Cascade)
  auctionItem   AuctionItem @relation(fields: [auctionItemId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Restrict)
}

model CartItem {
  id            String      @id @default(uuid())
  userId        String
  auctionItemId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  auctionItem   AuctionItem @relation(fields: [auctionItemId], references: [id], onDelete: Restrict)
}

model ChatMessage {
  id            String      @id @default(uuid())
  auctionRoomId String 
  userId        String
  content       String
  createdAt     DateTime    @default(now())
  auctionRoom   AuctionRoom @relation(fields: [auctionRoomId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Restrict)
}
